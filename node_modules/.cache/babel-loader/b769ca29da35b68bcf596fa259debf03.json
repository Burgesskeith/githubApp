{"ast":null,"code":"var _jsxFileName = \"/Users/keithburgess/Desktop/THSFolders/github-app-functional-backup/src/Context/Github/GithubState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useContext } from \"react\";\nimport githubReducer from \"./GithubReducer\";\nimport axios from \"axios\";\nimport { ALL_USERS, SET_LOADING, SET_USER, RESET_USER, RESET_LOADING } from \"../types\";\nimport GithubContext from \"./GithubContext\";\nimport AlertContext from \"../Alert/AlertContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GithubState = props => {\n  _s();\n\n  const {\n    setAlert\n  } = useContext(AlertContext);\n  const initialState = {\n    users: [],\n    loading: true,\n    user: {},\n    repos: []\n  };\n  const [state, dispatch] = useReducer(githubReducer, initialState);\n\n  const getAllUsers = () => {\n    axios.get(\"https://api.github.com/users\").then(res => {\n      dispatch({\n        type: ALL_USERS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch({\n        type: RESET_LOADING\n      });\n      setAlert(\"danger\", \" Error in fetching data , Please try again\");\n    });\n  };\n\n  const searchUsers = async query => {\n    try {\n      dispatch({\n        type: SET_LOADING\n      });\n\n      if (query === \" \") {\n        throw new Error(\" Enter a valid Username\");\n      }\n\n      let res = await axios.get(`https://api.github.com/search/users?q=${query}`);\n      dispatch({\n        type: ALL_USERS,\n        payload: res.data.items\n      });\n    } catch (error) {\n      dispatch({\n        type: RESET_LOADING\n      });\n      setAlert(\"danger\", \" Please Enter a valid Github Username\");\n    }\n  };\n\n  const getUserInfo = async username => {\n    try {\n      dispatch({\n        type: SET_LOADING\n      });\n      let user = await axios.get(`https://api.github.com/users/${username}`);\n      let repos = await axios.get(`https://api.github.com/users/${username}/repos`);\n      dispatch({\n        type: SET_USER,\n        payload: {\n          user: user.data,\n          repos: repos.data\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: RESET_LOADING\n      });\n      setAlert(\"danger\", \" Error fetching user information, Please use a valid user name\");\n    }\n  };\n\n  const resetUserInfo = () => {\n    dispatch({\n      type: RESET_USER\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: { ...state,\n      getAllUsers,\n      searchUsers,\n      getUserInfo,\n      resetUserInfo\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GithubState, \"+ej53wa4R/O3BuERoeobyjhjwYc=\");\n\n_c = GithubState;\nexport default GithubState;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubState\");","map":{"version":3,"sources":["/Users/keithburgess/Desktop/THSFolders/github-app-functional-backup/src/Context/Github/GithubState.js"],"names":["React","useReducer","useContext","githubReducer","axios","ALL_USERS","SET_LOADING","SET_USER","RESET_USER","RESET_LOADING","GithubContext","AlertContext","GithubState","props","setAlert","initialState","users","loading","user","repos","state","dispatch","getAllUsers","get","then","res","type","payload","data","catch","err","searchUsers","query","Error","items","error","getUserInfo","username","resetUserInfo","children"],"mappings":"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","sourcesContent":["import React, { useReducer, useContext } from \"react\";\nimport githubReducer from \"./GithubReducer\";\nimport axios from \"axios\";\nimport {\n  ALL_USERS,\n  SET_LOADING,\n  SET_USER,\n  RESET_USER,\n  RESET_LOADING,\n} from \"../types\";\nimport GithubContext from \"./GithubContext\";\nimport AlertContext from \"../Alert/AlertContext\";\n\nconst GithubState = (props) => {\n  const { setAlert } = useContext(AlertContext);\n  const initialState = {\n    users: [],\n    loading: true,\n    user: {},\n    repos: [],\n  };\n  const [state, dispatch] = useReducer(githubReducer, initialState);\n  const getAllUsers = () => {\n    axios\n      .get(\"https://api.github.com/users\")\n      .then((res) => {\n        dispatch({ type: ALL_USERS, payload: res.data });\n      })\n      .catch((err) => {\n        dispatch({ type: RESET_LOADING });\n        setAlert(\"danger\", \" Error in fetching data , Please try again\");\n      });\n  };\n  const searchUsers = async (query) => {\n    try {\n      dispatch({ type: SET_LOADING });\n      if (query === \" \") {\n        throw new Error(\" Enter a valid Username\");\n      }\n      let res = await axios.get(\n        `https://api.github.com/search/users?q=${query}`\n      );\n      dispatch({ type: ALL_USERS, payload: res.data.items });\n    } catch (error) {\n      dispatch({ type: RESET_LOADING });\n      setAlert(\"danger\", \" Please Enter a valid Github Username\");\n    }\n  };\n\n  const getUserInfo = async (username) => {\n    try {\n      dispatch({ type: SET_LOADING });\n      let user = await axios.get(`https://api.github.com/users/${username}`);\n      let repos = await axios.get(\n        `https://api.github.com/users/${username}/repos`\n      );\n      dispatch({\n        type: SET_USER,\n        payload: { user: user.data, repos: repos.data },\n      });\n    } catch (error) {\n      dispatch({ type: RESET_LOADING });\n      setAlert(\n        \"danger\",\n        \" Error fetching user information, Please use a valid user name\"\n      );\n    }\n  };\n\n  const resetUserInfo = () => {\n    dispatch({ type: RESET_USER });\n  };\n\n  return (\n    <GithubContext.Provider\n      value={{ ...state, getAllUsers, searchUsers, getUserInfo, resetUserInfo }}\n    >\n      {props.children}\n    </GithubContext.Provider>\n  );\n};\n\nexport default GithubState;\n"]},"metadata":{},"sourceType":"module"}